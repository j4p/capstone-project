library(dplyr)
library(tidyr)
library(ggplot2)

ds<-as_tibble(read.csv("day3/comic_heroes.csv"))

# check the list of column names
names(ds)

##### SELECT #####
# for selecting columns

#Select column by name
select(ds, Eye.color, Race)  # or
ds %>% select(Eye.color, Race)

#Select many columns
ds %>% select(name:Hair.color)
ds %>% select(name, ends_with("color"))
ds %>% select(name, starts_with("H"))

#Drop column
ds %>% select(-Gender, -Hair.color)
ds %>% select(-c(Gender, Hair.color))

#Select and drop by columns number
ds %>% select(3,5)
ds %>% select(1:4)
ds %>% select(-3,-5)
ds %>% select(-c(1:4))

#select columns based on partial column names
ds %>% select(starts_with("Weight"))
ds %>% select(Publisher, starts_with("Weight"))
ds %>% select(starts_with("W"))
ds %>% select(ends_with("color"))
ds %>% select(contains("color"))
ds %>% select(contains("sher"), ends_with("ment"))

#select_if
ds %>% select_if(is.numeric)
ds %>% select_if(is.factor)

# select for renaming
ds %>% select(heroes_name=name, m_or_f=Gender)

##### RENAME #####
# for renaming column
ds %>% rename(heroes_name=name, m_or_f=Gender)

##### FILTER #####
# for selecting rows
ds %>% 
  select(name, Weight.kg) %>% 
  filter(Weight.kg > 100)

ds %>% 
  select(name, Weight.kg) %>% 
  filter(Weight.kg > 100, Weight.kg <120)

ds %>% 
  select(name, Weight.kg) %>% 
  filter(between(Weight.kg,100,120))

ds %>% 
  select(name, Publisher, Skin.color) %>% 
  filter(Publisher == "Marvel Comics")

ds %>% 
  select(name, Publisher) %>% 
  filter(Publisher == "Marvel Comics" | Publisher == "DC Comics")

ds %>% 
  select(name, Publisher) %>% 
  filter(Publisher %in% c("George Lucas","J. R. R. Tolkien"))

#Filter rows based on partial column names that have similar pattern
ds %>% 
  select(name, Publisher) %>% 
  filter(str_detect(name, pattern = "man"), Publisher=="DC Comics")

ds %>% 
  select(name, Publisher) %>% 
  filter(!is.na(Publisher)) 

#6. Data sorting
#7. Create new variable
#8. Summarize data
#9. Dplyr and ggplot integration

##### ARRANGE #####
# menggunakan fungsi arrange

ds %>% 
  select(name, Publisher) %>% 
  arrange(Publisher)

ds %>% 
  select(name, Publisher) %>% 
  arrange(desc(Publisher))

##### MUTATE #####
ds %>% 
  select(name, Publisher, Weight) %>% 
  mutate(Publisher2 = paste("DC Comics"))

ds %>% 
  select(name, Publisher, Weight, Weight.kg) %>% 
  mutate(Weight_kg2 = Weight/2.205)

ds %>% 
  select(name, Weight.kg) %>% 
  mutate(weight.class = case_when(
    Weight.kg >20 ~ "Light",
    Weight.kg >50 ~ "Medium",
    Weight.kg >100 ~"Heavy",
    TRUE~"Super light"))

##### COUNT #####
#Count the number of observations
ds %>% count(Publisher)
ds %>% count(Skin.color)

##### SUMMARIZE / SUMMARISE #####

ds %>% 
  select(name, Weight.kg, Height) %>% 
  summarise(mean_weight=mean(na.omit(Weight.kg)),
            mean_height=max(na.omit(Height)))

ds %>%  
  group_by(Publisher) %>% 
  summarise(Weight.kg = sum(Weight.kg)) 


##### EXERCISE #####
ds<-as_tibble(read.csv("./day3/comic_heroes.csv"))

# 1. Select all columns end with 'color'
ds %>% ...

# 2. Select columns 3-6 dan 10
ds %>% ...

# 3. Select unique rows from column Gender and Eye.color
ds %>% ... %>% ...
ds %>% ... %>% ...

# 4. Race dan gender manakah yang paling tinggi?
# hint: cari rata-rata tinggi per race dan gender, kemudian urutkan dari yang rata-ratanya paling tinggi. 
ds %>% 
  ... %>% 
  ... %>%
  ... %>%
  ...